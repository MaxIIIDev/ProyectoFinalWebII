mixin agregarAlasDesdeDb(alas)
    for ala of alas 
        option(value=ala.nombre)  #{ala.nombre}

mixin agregarMotivosDesdeDb(motivos)
    for motivo of motivos
        option(
            value=motivo.dataValues.id_motivo_de_Internacion
        ) #{motivo.dataValues.motivo}
mixin agregarMotivosDesdeDbActualizarAdmision(motivos,admision)
    for motivo of motivos
        option(
            value=motivo.dataValues.id_motivo_de_Internacion selected=(motivo.dataValues.id_motivo_de_Internacion === admision.id_motivo_de_Internacion)
        ) #{motivo.dataValues.motivo}

mixin agregarHabitacionSeleccionada(nombre_ala,nro_habitacion,id_Paciente)
    .d-flex.flex-column.gap-3.mb-4
          .info-box.p-3
            h4.text-muted Ala
            if(nombre_ala != undefined)
                h2.fw-bold #{nombre_ala}
            else 
                h2.fw-bold 
          .info-box.p-3
            h4.text-muted Habitaci√≥n
            if(nro_habitacion != undefined)
                h2.fw-bold #{nro_habitacion}
            else 
                h2.fw-bold
            .info-box.p-3
            h4.text-muted ID PACIENTE
                h2.fw-bold #{id_Paciente}
mixin agregarMutualesDesdeDb(mutuales)
    for mutual of mutuales
        option(value=mutual.dataValues.id_mutual
        ) #{mutual.dataValues.nombre}
mixin agregarCategoriasDesdeDb(categorias)
    for categoria of categorias
        option(value=categoria.dataValues.id_Categoria_Seguro
        ) #{categoria.dataValues.nombre}           

mixin agregarMutualesYSeleccionar(mutuales,seguroMedico)
    for mutual of mutuales
        option(value=mutual.dataValues.id_mutual, selected=(seguroMedico.mutual.dataValues.id_mutual === mutual.dataValues.id_mutual)
        ) #{mutual.dataValues.nombre}

mixin agregarCategoriasYSeleccionar(categorias,seguroMedico)
    for categoria of categorias
        option(value=categoria.dataValues.id_Categoria_Seguro, selected=(seguroMedico.categoria_seguro.dataValues.id_Categoria_Seguro === categoria.dataValues.id_Categoria_Seguro)
        ) #{categoria.dataValues.nombre}           


mixin cargarPrioridadDeAtencion(prioridades)
    for prioridad of prioridades 
        option(value= prioridad.dataValues.id_prioridad_de_atencion)  #{prioridad.dataValues.prioridad}
mixin cargarPrioridadDeAtencionActualizarAdmision(prioridades,admision)
    for prioridad of prioridades 
        option(value= prioridad.dataValues.id_prioridad_de_atencion selected=(prioridad.dataValues.id_prioridad_de_atencion === admision.id_prioridad_de_atencion))  #{prioridad.dataValues.prioridad}


mixin cargarTiposDeAdmision(tiposDeAdmision)
    for tipoDeAdmision of tiposDeAdmision
        option(value= tipoDeAdmision.dataValues.id_tipo_de_admision) #{tipoDeAdmision.dataValues.tipo}

mixin cargarTiposDeAdmisionActualizar(tiposDeAdmision,admision)
    for tipoDeAdmision of tiposDeAdmision
        option(value= tipoDeAdmision.dataValues.id_tipo_de_admision selected=(tipoDeAdmision.dataValues.id_tipo_de_admision === admision.id_tipo_de_admision)) #{tipoDeAdmision.dataValues.tipo}


mixin cargarUnidad(alas)
    for ala of alas 
        option(value= ala.nombre) #{ala.unidad}
mixin cargarUnidadVistaActualizarAdmision(alas, restosAdmision)
    
    for ala of alas 
        option(value= ala.nombre selected=(ala.nombre == restosAdmision)) #{ala.unidad}
mixin cargarMedicosDesdeDb(medicos)
    for medico of medicos 
        option(value = medico.dataValues.id_Medico) #{medico.dataValues.nombre} #{medico.dataValues.apellido} - Especialidad: #{medico.dataValues.especialidad.dataValues.nombre}
mixin cargarHorarios(horarios)
    for horario of horarios 
        option( value = horario.dataValues.id_horario_turno) #{horario.dataValues.hora}  
       
mixin cargarMedicosYSeleccionarDesdeDb(medicos, actual)
    for medico of medicos 
        option(value = medico.dataValues.id_Medico, selected=(medico.dataValues.id_Medico == actual.dataValues.medico.dataValues.id_Medico)) #{medico.dataValues.nombre} #{medico.dataValues.apellido} - Especialidad: #{medico.dataValues.especialidad.dataValues.nombre}
mixin cargarHorariosYSeleccionar(horarios, actual)
    for horario of horarios 
        option( value = horario.dataValues.id_horario_turno, selected=(horario.dataValues.id_horario_turno == actual.dataValues.id_horario_turno)) #{horario.dataValues.hora}  
       
